{\rtf1\ansi\ansicpg936\cocoartf2820
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # Cell Ranger Processing Pipeline\
# This script automates the Cell Ranger processing workflow for single-cell RNA-seq data.\
\
import os\
import subprocess\
import argparse\
import scanpy as sc\
\
\
def run_command(command):\
    """Runs a system command and prints output in real-time."""\
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\
    for line in process.stdout:\
        print(line, end="")\
    process.wait()\
    if process.returncode != 0:\
        raise RuntimeError(f"Command failed: \{command\}\\n\{process.stderr.read()\}")\
\
\
def cellranger_count(sample_id, fastq_dir, transcriptome, output_dir):\
    """Runs Cell Ranger count for a given sample."""\
    command = (\
        f"cellranger count --id=\{sample_id\} "\
        f"--transcriptome=\{transcriptome\} "\
        f"--fastqs=\{fastq_dir\} "\
        f"--sample=\{sample_id\} "\
        f"--localcores=8 --localmem=64"\
    )\
    run_command(command)\
    print(f"Processing for sample \{sample_id\} completed.")\
\
\
def cellranger_aggr(sample_list, csv_file, output_dir):\
    """Aggregates multiple samples into one output."""\
    command = (\
        f"cellranger aggr --id=\{output_dir\} "\
        f"--csv=\{csv_file\} --normalize=mapped"\
    )\
    run_command(command)\
    print(f"Aggregation for \{csv_file\} completed.")\
\
\
def process_with_scanpy(output_dir):\
    """Processes Cell Ranger output using Scanpy."""\
    data_path = os.path.join(output_dir, 'outs', 'filtered_feature_bc_matrix')\
    adata = sc.read_10x_mtx(data_path, var_names='gene_symbols', cache=True)\
    sc.pp.filter_cells(adata, min_genes=200)\
    sc.pp.filter_genes(adata, min_cells=3)\
    adata.var['mt'] = adata.var_names.str.startswith('MT-')\
    sc.pp.calculate_qc_metrics(adata, qc_vars=['mt'], percent_top=None, log1p=False, inplace=True)\
    sc.pp.normalize_total(adata, target_sum=1e4)\
    sc.pp.log1p(adata)\
    sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5)\
    adata = adata[:, adata.var.highly_variable]\
    sc.pp.scale(adata, max_value=10)\
    sc.tl.pca(adata, svd_solver='arpack')\
    sc.pp.neighbors(adata, n_neighbors=10, n_pcs=40)\
    sc.tl.umap(adata)\
    sc.pl.umap(adata, color=['CST3', 'NKG7', 'PPBP'])\
    adata.write(os.path.join(output_dir, 'processed_data.h5ad'))\
    print(f"Scanpy processing completed. Results saved to \{output_dir\}")\
\
\
def run_infercnv(output_dir, infercnv_script, infercnv_config):\
    """Runs inferCNV analysis."""\
    command = f"Rscript \{infercnv_script\} --config \{infercnv_config\} --out_dir \{output_dir\}"\
    run_command(command)\
    print(f"inferCNV analysis completed. Results saved to \{output_dir\}")\
\
\
def parse_args():\
    """Parses command-line arguments."""\
    parser = argparse.ArgumentParser(description="Cell Ranger Processing Pipeline")\
    parser.add_argument("--mode", choices=["count", "aggr", "process", "infercnv"], required=True, help="Processing mode")\
    parser.add_argument("--sample_id", help="Sample ID for count mode")\
    parser.add_argument("--fastq_dir", help="FASTQ directory for count mode")\
    parser.add_argument("--transcriptome", help="Transcriptome reference path")\
    parser.add_argument("--csv_file", help="CSV file for aggregation mode")\
    parser.add_argument("--output_dir", required=True, help="Output directory")\
    parser.add_argument("--infercnv_script", help="Path to inferCNV R script")\
    parser.add_argument("--infercnv_config", help="Path to inferCNV configuration file")\
    return parser.parse_args()\
\
\
def main():\
    args = parse_args()\
\
    if args.mode == "count":\
        if not all([args.sample_id, args.fastq_dir, args.transcriptome]):\
            raise ValueError("Missing required arguments for count mode.")\
        cellranger_count(args.sample_id, args.fastq_dir, args.transcriptome, args.output_dir)\
\
    elif args.mode == "aggr":\
        if not args.csv_file:\
            raise ValueError("Missing required CSV file for aggregation mode.")\
        cellranger_aggr(args.sample_id, args.csv_file, args.output_dir)\
\
    elif args.mode == "process":\
        process_with_scanpy(args.output_dir)\
\
    elif args.mode == "infercnv":\
        if not all([args.infercnv_script, args.infercnv_config]):\
            raise ValueError("Missing required arguments for inferCNV mode.")\
        run_infercnv(args.output_dir, args.infercnv_script, args.infercnv_config)\
\
if __name__ == "__main__":\
    main()\
}